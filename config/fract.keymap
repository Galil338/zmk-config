/*
 * Copyright (c) 2024 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEF 0
#define SYM 1
#define FUN 2
#define COMBO_TIMEOUT 25

/ {
    behaviors {
        ltl: layer_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <130>;
            bindings = <&mo>, <&kp>;
            display-name = "Layer-Tap";
        };
        ltr: layer_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <180>;
            bindings = <&mo>, <&kp>;
            display-name = "Layer-Tap";
        };
    };
};

/ {
    combos {
        compatible = "zmk,combos";
        combo_grave {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <1 11>;
            bindings = <&kp GRAVE>;
            layers = <DEF>;
        };
        combo_semi {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <2 12>;
            bindings = <&kp SEMI>;
            layers = <DEF>;
        };
        combo_minus {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <7 17>;
            bindings = <&kp MINUS>;
            layers = <DEF>;
        };
        combo_equal {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <8 18>;
            bindings = <&kp EQUAL>;
            layers = <DEF>;
        };
        combo_tilde {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <1 11>;
            bindings = <&kp GRAVE>;
            layers = <SYM>;
        };
        combo_colon {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <2 12>;
            bindings = <&kp COLON>;
            layers=<SYM>;
        };
        combo_under {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <7 17>;
            bindings = <&kp UNDER>;
            layers = <SYM>;
        };
        combo_plus {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <8 18>;
            bindings = <&kp PLUS>;
            layers = <SYM>;
        };
        combo_lgui {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <10 20>;
            bindings = <&kp LGUI>;
        };
        combo_lalt {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <11 21>;
            bindings = <&kp LALT>;
        };
        combo_lshft {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <12 22>;
            bindings = <&kp LSHFT>;
        };
        combo_lctrl {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <13 23>;
            bindings = <&kp LCTRL>;
        };
        combo_esc {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <14 24>;
            bindings = <&kp ESC>;
        };
        combo_enter {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <15 25>;
            bindings = <&kp ENTER>;
        };
        combo_rctrl {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <16 26>;
            bindings = <&kp RCTRL>;
        };
        combo_rshft {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <17 27>;
            bindings = <&kp RSHFT>;
        };
        combo_ralt {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <18 28>;
            bindings = <&kp RALT>;
        };
        combo_rgui {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <19 29>;
            bindings = <&kp RGUI>;
        };
        combo_bt_sel_0 {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <5 6>;
            bindings = <&bt BT_SEL 0>;
            layers = <FUN>;
        };
        combo_bt_nxt {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <15 16>;
            bindings = <&bt BT_NXT>;
            layers = <FUN>;
        };
        combo_bt_clr {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <25 26>;
            bindings = <&bt BT_CLR>;
            layers = <FUN>;
        };
        combo_c_pp {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <6 16>;
            bindings = <&kp C_PP>;
            layers = <FUN>;
        };
        combo_c_prev {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <7 17>;
            bindings = <&kp C_PREV>;
            layers = <FUN>;
        };
        combo_c_next {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <8 18>;
            bindings = <&kp C_NEXT>;
            layers = <FUN>;
        };
    };
};

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                &kp Q &kp W &kp F &kp P   &kp G        &kp J          &kp L   &kp U     &kp Y   &kp SQT
                &kp A &kp R &kp S &kp T   &kp D        &kp H          &kp N   &kp E     &kp I   &kp O
                &kp Z &kp X &kp C &kp V   &kp B        &kp K          &kp M   &kp COMMA &kp DOT &kp SLASH
                                  &kp DEL &ltl SYM TAB &ltr FUN SPACE &kp BSPC
            >;
        };

        symbol_layer {
            bindings = <
                &kp N1   &kp N2   &kp N3   &kp N4   &kp N5    &kp N6    &kp N7    &kp N8   &kp N9   &kp DQT
                &kp EXCL &kp LPAR &kp RPAR &kp DLLR &kp AMPS  &kp PIPE  &kp HASH  &kp LBRC &kp RBRC &kp N0
                &kp AT   &kp LBKT &kp RBKT &kp BSLH &kp PRCNT &kp CARET &kp ASTRK &kp LT   &kp GT   &kp QMARK
                                           &trans   &trans    &kp SPACE &trans
            >;
        };

        function_layer {
            bindings = <
                &kp F1 &kp F2  &kp F3  &kp F4  &kp PSCRN &kp SLCK   &kp HOME   &kp PG_DN    &kp PG_UP    &kp END
                &kp F5 &kp F6  &kp F7  &kp F8  &kp INS   &kp CLCK   &kp LEFT   &kp DOWN     &kp UP       &kp RIGHT
                &kp F9 &kp F10 &kp F11 &kp F12 &kp K_APP &kp KP_NUM &kp C_MUTE &kp C_VOL_DN &kp C_VOL_UP &kp PAUSE_BREAK
                                       &trans  &trans    &trans     &trans
            >;
        };
    };
};